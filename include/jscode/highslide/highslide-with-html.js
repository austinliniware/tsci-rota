/******************************************************************************
Name:    Highslide JS
Version: 4.0.10 (November 25 2008)
Config:  default +inline +ajax +iframe +flash
Author:  Torstein Hønsi
Support: http://highslide.com/support

Licence:
Highslide JS is licensed under a Creative Commons Attribution-NonCommercial 2.5
License (http://creativecommons.org/licenses/by-nc/2.5/).

You are free:
	* to copy, distribute, display, and perform the work
	* to make derivative works

Under the following conditions:
	* Attribution. You must attribute the work in the manner  specified by  the
	  author or licensor.
	* Noncommercial. You may not use this work for commercial purposes.

* For  any  reuse  or  distribution, you  must make clear to others the license
  terms of this work.
* Any  of  these  conditions  can  be  waived  if  you  get permission from the 
  copyright holder.

Your fair use and other rights are in no way affected by the above.
******************************************************************************/

var hs = {
// Language strings
lang : {
	cssDirection: 'ltr',
	loadingText : 'Loading...',
	loadingTitle : 'Click to cancel',
	focusTitle : 'Click to bring to front',
	fullExpandTitle : 'Expand to actual size (f)',
	creditsText : 'Powered by <i>Highslide JS</i>',
	creditsTitle : 'Go to the Highslide JS homepage',
	previousText : 'Previous',
	nextText : 'Next', 
	moveText : 'Move',
	closeText : 'Close', 
	closeTitle : 'Close (esc)', 
	resizeTitle : 'Resize',
	playText : 'Play',
	playTitle : 'Play slideshow (spacebar)',
	pauseText : 'Pause',
	pauseTitle : 'Pause slideshow (spacebar)',
	previousTitle : 'Previous (arrow left)',
	nextTitle : 'Next (arrow right)',
	moveTitle : 'Move',
	fullExpandText : 'Full size',
	restoreTitle : 'Click to close image, click and drag to move. Use arrow keys for next and previous.'
},
// See http://highslide.com/ref for examples of settings  
graphicsDir : 'highslide/graphics/',
expandCursor : 'zoomin.cur', // null disables
restoreCursor : 'zoomout.cur', // null disables
expandDuration : 250, // milliseconds
restoreDuration : 250,
marginLeft : 15,
marginRight : 15,
marginTop : 15,
marginBottom : 15,
zIndexCounter : 1001, // adjust to other absolutely positioned elements
loadingOpacity : 0.75,
allowMultipleInstances: true,
numberOfImagesToPreload : 5,
outlineWhileAnimating : 2, // 0 = never, 1 = always, 2 = HTML only 
outlineStartOffset : 3, // ends at 10
fullExpandPosition : 'bottom right',
fullExpandOpacity : 1,
padToMinWidth : false, // pad the popup width to make room for wide caption
showCredits : true, // you can set this to false if you want
creditsHref : 'http://highslide.com',
enableKeyListener : true,

allowWidthReduction : false,
allowHeightReduction : true,
preserveContent : true, // Preserve changes made to the content and position of HTML popups.
objectLoadTime : 'before', // Load iframes 'before' or 'after' expansion.
cacheAjax : true, // Cache ajax popups for instant display. Can be overridden for each popup.
dragByHeading: true,
minWidth: 200,
minHeight: 200,
allowSizeReduction: true, // allow the image to reduce to fit client size. If false, this overrides minWidth and minHeight
outlineType : 'drop-shadow', // set null to disable outlines
wrapperClassName : 'highslide-wrapper', // for enhanced css-control
skin : {
	contentWrapper:
		'<div class="highslide-header"><ul>'+
			'<li class="highslide-previous">'+
				'<a href="#" title="{hs.lang.previousTitle}" onclick="return hs.previous(this)">'+
				'<span>{hs.lang.previousText}</span></a>'+
			'</li>'+
			'<li class="highslide-next">'+
				'<a href="#" title="{hs.lang.nextTitle}" onclick="return hs.next(this)">'+
				'<span>{hs.lang.nextText}</span></a>'+
			'</li>'+
			'<li class="highslide-move">'+
				'<a href="#" title="{hs.lang.moveTitle}" onclick="return false">'+
				'<span>{hs.lang.moveText}</span></a>'+
			'</li>'+
			'<li class="highslide-close">'+
				'<a href="#" title="{hs.lang.closeTitle}" onclick="return hs.close(this)">'+
				'<span>{hs.lang.closeText}</span></a>'+
			'</li>'+
		'</ul></div>'+
		'<div class="highslide-body"></div>'+
		'<div class="highslide-footer"><div>'+
			'<span class="highslide-resize" title="{hs.lang.resizeTitle}"><span></span></span>'+
		'</div></div>'
},
// END OF YOUR SETTINGS


// declare internal properties
preloadTheseImages : [],
continuePreloading: true,
expanders : [],
overrides : [
	'allowSizeReduction',
	'outlineType',
	'outlineWhileAnimating',
	'captionId',
	'captionText',
	'captionEval',
	'captionOverlay',
	'headingId',
	'headingText',
	'headingEval',
	'headingOverlay',
	'dragByHeading',
	
	'contentId',
	'width',
	'height',
	'allowWidthReduction',
	'allowHeightReduction',
	'preserveContent',
	'maincontentId',
	'maincontentText',
	'maincontentEval',
	'objectType',	
	'cacheAjax',	
	'objectWidth',
	'objectHeight',
	'objectLoadTime',	
	'swfOptions',
	'wrapperClassName',
	'minWidth',
	'minHeight',
	'maxWidth',
	'maxHeight',
	'slideshowGroup',
	'easing',
	'easingClose',
	'fadeInOut',
	'src'
],
overlays : [],
idCounter : 0,
oPos : {
	x: ['leftpanel', 'left', 'center', 'right', 'rightpanel'],
	y: ['above', 'top', 'middle', 'bottom', 'below']
},
mouse: {},
headingOverlay: {},
captionOverlay: {},
swfOptions: { flashvars: {}, params: {}, attributes: {} },
faders : [],

pendingOutlines : {},
sleeping : [],
preloadTheseAjax : [],
cacheBindings : [],
cachedGets : {},
clones : {},
ie : (document.all && !window.opera),
safari : /Safari/.test(navigator.userAgent),
geckoMac : /Macintosh.+rv:1\.[0-8].+Gecko/.test(navigator.userAgent),

$ : function (id) {
	return document.getElementById(id);
},

push : function (arr, val) {
	arr[arr.length] = val;
},

createElement : function (tag, attribs, styles, parent, nopad) {
	var el = document.createElement(tag);
	if (attribs) hs.setAttribs(el, attribs);
	if (nopad) hs.setStyles(el, {padding: 0, border: 'none', margin: 0});
	if (styles) hs.setStyles(el, styles);
	if (parent) parent.appendChild(el);	
	return el;
},

setAttribs : function (el, attribs) {
	for (var x in attribs) el[x] = attribs[x];
},

setStyles : function (el, styles) {
	for (var x in styles) {
		if (hs.ie && x == 'opacity') {
			if (styles[x] > 0.99) el.style.removeAttribute('filter');
			else el.style.filter = 'alpha(opacity='+ (styles[x] * 100) +')';
		}
		else el.style[x] = styles[x];
	}
},

ieVersion : function () {
	var arr = navigator.appVersion.split("MSIE");
	return arr[1] ? parseFloat(arr[1]) : null;
},

getPageSize : function () {
	var d = document, w = window, iebody = d.compatMode && d.compatMode != 'BackCompat' 
		? d.documentElement : d.body;
	
	var width = hs.ie ? iebody.clientWidth : 
			(d.documentElement.clientWidth || self.innerWidth),
		height = hs.ie ? iebody.clientHeight : self.innerHeight;
	
	return {
		width: width,
		height: height,		
		scrollLeft: hs.ie ? iebody.scrollLeft : pageXOffset,
		scrollTop: hs.ie ? iebody.scrollTop : pageYOffset
	}
},

getPosition : function(el)	{
	var p = { x: el.offsetLeft, y: el.offsetTop };
	while (el.offsetParent)	{
		el = el.offsetParent;
		p.x += el.offsetLeft;
		p.y += el.offsetTop;
		if (el != document.body && el != document.documentElement) {
			p.x -= el.scrollLeft;
			p.y -= el.scrollTop;
		}
	}
	return p;
},
expand : function(a, params, custom, type) {
	if (!a) a = hs.createElement('a', null, { display: 'none' }, hs.container);
	if (typeof a.getParams == 'function') return params;
	if (type == 'html') {
		for (var i = 0; i < hs.sleeping.length; i++) {
			if (hs.sleeping[i] && hs.sleeping[i].a == a) {
				hs.sleeping[i].awake();
				hs.sleeping[i] = null;
				return false;
			}
		}
		hs.hasHtmlExpanders = true;
	}	
	try {	
		new hs.Expander(a, params, custom, type);
		return false;
	} catch (e) { return true; }
},

htmlExpand : function(a, params, custom) {
	return hs.expand(a, params, custom, 'html');
},

getSelfRendered : function() {
	return hs.createElement('div', { 
		className: 'highslide-html-content', 
		innerHTML: hs.replaceLang(hs.skin.contentWrapper) 
	});
},
getElementByClass : function (el, tagName, className) {
	var els = el.getElementsByTagName(tagName);
	for (var i = 0; i < els.length; i++) {
    	if ((new RegExp(className)).test(els[i].className)) {
			return els[i];
		}
	}
	return null;
},
replaceLang : function(s) {
	s = s.replace(/\s/g, ' ');
	var re = /{hs\.lang\.([^}]+)\}/g,
		matches = s.match(re),
		lang;
	if (matches) for (var i = 0; i < matches.length; i++) {
		lang = matches[i].replace(re, "$1");
		if (typeof hs.lang[lang] != 'undefined') s = s.replace(matches[i], hs.lang[lang]);
	}
	return s;
},


getCacheBinding : function (a) {
	for (var i = 0; i < hs.cacheBindings.length; i++) {
		if (hs.cacheBindings[i][0] == a) {
			var c = hs.cacheBindings[i][1];
			hs.cacheBindings[i][1] = c.cloneNode(1);
			return c;
		}
	}
	return null;
},

preloadAjax : function (e) {
	var arr = hs.getAnchors();
	for (var i = 0; i < arr.htmls.length; i++) {
		var a = arr.htmls[i];
		if (hs.getParam(a, 'objectType') == 'ajax' && hs.getParam(a, 'cacheAjax'))
			hs.push(hs.preloadTheseAjax, a);
	}
	
	hs.preloadAjaxElement(0);
},

preloadAjaxElement : function (i) {
	if (!hs.preloadTheseAjax[i]) return;
	var a = hs.preloadTheseAjax[i];
	var cache = hs.getNode(hs.getParam(a, 'contentId'));
	if (!cache) cache = hs.getSelfRendered();
	var ajax = new hs.Ajax(a, cache, 1);	
   	ajax.onError = function () { };
   	ajax.onLoad = function () {
   		hs.push(hs.cacheBindings, [a, cache]);
   		hs.preloadAjaxElement(i + 1);
   	};
   	ajax.run();
},

focusTopmost : function() {
	var topZ = 0, topmostKey = -1;
	for (var i = 0; i < hs.expanders.length; i++) {
		if (hs.expanders[i]) {
			if (hs.expanders[i].wrapper.style.zIndex && hs.expanders[i].wrapper.style.zIndex > topZ) {
				topZ = hs.expanders[i].wrapper.style.zIndex;
				
				topmostKey = i;
			}
		}
	}
	if (topmostKey == -1) hs.focusKey = -1;
	else hs.expanders[topmostKey].focus();
},

getParam : function (a, param) {
	a.getParams = a.onclick;
	var p = a.getParams ? a.getParams() : null;
	a.getParams = null;
	
	return (p && typeof p[param] != 'undefined') ? p[param] : 
		(typeof hs[param] != 'undefined' ? hs[param] : null);
},

getSrc : function (a) {
	var src = hs.getParam(a, 'src');
	if (src) return src;
	return a.href;
},

getNode : function (id) {
	var node = hs.$(id), clone = hs.clones[id], a = {};
	if (!node && !clone) return null;
	if (!clone) {
		clone = node.cloneNode(true);
		clone.id = '';
		hs.clones[id] = clone;
		return node;
	} else {
		return clone.cloneNode(true);
	}
},

discardElement : function(d) {
	hs.garbageBin.appendChild(d);
	hs.garbageBin.innerHTML = '';
},

previousOrNext : function (el, op) {
	hs.updateAnchors();
	var exp = hs.last = hs.getExpander(el);
	try {
		var adj = hs.upcoming =  exp.getAdjacentAnchor(op);
		adj.onclick(); 		
	} catch (e){
		hs.last = hs.upcoming = null;
	}
	try { exp.close(); } catch (e) {}
	return false;
},

previous : function (el) {
	return hs.previousOrNext(el, -1);
},

next : function (el) {
	return hs.previousOrNext(el, 1);	
},

keyHandler : function(e) {
	if (!e) e = window.event;
	if (!e.target) e.target = e.srcElement; // ie
	if (typeof e.target.form != 'undefined') return true; // form element has focus
	var exp = hs.getExpander();
	
	var op = null;
	switch (e.keyCode) {
		case 70: // f
			if (exp) exp.doFullExpand();
			return true;
		case 32: // Space
		case 34: // Page Down
		case 39: // Arrow right
		case 40: // Arrow down
			op = 1;
			break;
		case 8:  // Backspace
		case 33: // Page Up
		case 37: // Arrow left
		case 38: // Arrow up
			op = -1;
			break;
		case 27: // Escape
		case 13: // Enter
			op = 0;
	}
	if (op !== null) {hs.removeEventListener(document, window.opera ? 'keypress' : 'keydown', hs.keyHandler);
		if (!hs.enableKeyListener) return true;
		
		if (e.preventDefault) e.preventDefault();
    	else e.returnValue = false;
    	
    	if (exp) {
			if (op == 0) {
				exp.close();
			} else {
				hs.previousOrNext(exp.key, op);
			}
			return false;
		}
	}
	return true;
},


registerOverlay : function (overlay) {
	hs.push(hs.overlays, overlay);
},


getWrapperKey : function (element, expOnly) {
	var el, re = /^highslide-wrapper-([0-9]+)$/;
	// 1. look in open expanders
	el = element;
	while (el.parentNode)	{
		if (el.id && re.test(el.id)) return el.id.replace(re, "$1");
		el = el.parentNode;
	}
	// 2. look in thumbnail
	if (!expOnly) {
		el = element;
		while (el.parentNode)	{
			if (el.tagName && hs.isHsAnchor(el)) {
				for (var key = 0; key < hs.expanders.length; key++) {
					var exp = hs.expanders[key];
					if (exp && exp.a == el) return key;
				}
			}
			el = el.parentNode;
		}
	}
	return null; 
},

getExpander : function (el, expOnly) {
	if (typeof el == 'undefined') return hs.expanders[hs.focusKey] || null;
	if (typeof el == 'number') return hs.expanders[el] || null;
	if (typeof el == 'string') el = hs.$(el);
	return hs.expanders[hs.getWrapperKey(el, expOnly)] || null;
},

isHsAnchor : function (a) {
	return (a.onclick && a.onclick.toString().replace(/\s/g, ' ').match(/hs.(htmlE|e)xpand/));
},

reOrder : function () {
	for (var i = 0; i < hs.expanders.length; i++)
		if (hs.expanders[i] && hs.expanders[i].isExpanded) hs.focusTopmost();
},

mouseClickHandler : function(e) 
{	
	if (!e) e = window.event;
	if (e.button > 1) return true;
	if (!e.target) e.target = e.srcElement;
	
	var el = e.target;
	while (el.parentNode
		&& !(/highslide-(image|move|html|resize)/.test(el.className)))
	{
		el = el.parentNode;
	}
	var exp = hs.getExpander(el);
	if (exp && (exp.isClosing || !exp.isExpanded)) return true;
		
	if (exp && e.type == 'mousedown') {
		if (e.target.form) return true;
		var match = el.className.match(/highslide-(image|move|resize)/);
		if (match) {
			hs.dragArgs = { exp: exp , type: match[1], left: exp.x.pos, width: exp.x.size, top: exp.y.pos, 
				height: exp.y.size, clickX: e.clientX, clickY: e.clientY };
			
			
			hs.addEventListener(document, 'mousemove', hs.dragHandler);
			if (e.preventDefault) e.preventDefault(); // FF
			
			if (/highslide-(image|html)-blur/.test(exp.content.className)) {
				exp.focus();
				hs.hasFocused = true;
			}
			return false;
		}
		else if (/highslide-html/.test(el.className) && hs.focusKey != exp.key) {
			exp.focus();
			exp.doShowHide('hidden');
		}
	} else if (e.type == 'mouseup') {
		
		hs.removeEventListener(document, 'mousemove', hs.dragHandler);
		
		if (hs.dragArgs) {
			if (hs.dragArgs.type == 'image')
				hs.dragArgs.exp.content.style.cursor = hs.styleRestoreCursor;
			var hasDragged = hs.dragArgs.hasDragged;
			
			if (!hasDragged &&!hs.hasFocused && !/(move|resize)/.test(hs.dragArgs.type)) {
				exp.close();
			} 
			else if (hasDragged || (!hasDragged && hs.hasHtmlExpanders)) {
				hs.dragArgs.exp.doShowHide('hidden');
			}
			
			if (hs.dragArgs.exp.releaseMask) 
				hs.dragArgs.exp.releaseMask.style.display = 'none';
			
			hs.hasFocused = false;
			hs.dragArgs = null;
		
		} else if (/highslide-image-blur/.test(el.className)) {
			el.style.cursor = hs.styleRestoreCursor;		
		}
	}
	return false;
},

dragHandler : function(e)
{
	if (!hs.dragArgs) return true;
	if (!e) e = window.event;
	var a = hs.dragArgs, exp = a.exp;
	if (exp.iframe) {		
		if (!exp.releaseMask) exp.releaseMask = hs.createElement('div', null, 
			{ position: 'absolute', width: exp.x.size+'px', height: exp.y.size+'px', 
				left: exp.x.cb+'px', top: exp.y.cb+'px', zIndex: 4,	background: (hs.ie ? 'white' : 'none'), 
				opacity: .01 }, 
			exp.wrapper, true);
		if (exp.releaseMask.style.display == 'none')
			exp.releaseMask.style.display = '';
	}
	
	a.dX = e.clientX - a.clickX;
	a.dY = e.clientY - a.clickY;	
	
	var distance = Math.sqrt(Math.pow(a.dX, 2) + Math.pow(a.dY, 2));
	if (!a.hasDragged) a.hasDragged = (a.type != 'image' && distance > 0)
		|| (distance > (hs.dragSensitivity || 5));
	
	if (a.hasDragged && e.clientX > 5 && e.clientY > 5) {
		
		if (a.type == 'resize') exp.resize(a);
		else {
			exp.moveTo(a.left + a.dX, a.top + a.dY);
			if (a.type == 'image') exp.content.style.cursor = 'move';
		}
	}
	return false;
},

wrapperMouseHandler : function (e) {
	try {
		if (!e) e = window.event;
		var over = /mouseover/i.test(e.type); 
		if (!e.target) e.target = e.srcElement; // ie
		if (hs.ie) e.relatedTarget = 
			over ? e.fromElement : e.toElement; // ie
		var exp = hs.getExpander(e.target);
		if (!exp.isExpanded) return;
		if (!exp || !e.relatedTarget || hs.getExpander(e.relatedTarget, true) == exp 
			|| hs.dragArgs) return;
		for (var i = 0; i < exp.overlays.length; i++) {
			var o = hs.$('hsId'+ exp.overlays[i]);
			if (o && o.hideOnMouseOut) {
				var from = over ? 0 : o.opacity,
					to = over ? o.opacity : 0;			
				hs.fade(o, from, to);
			}
		}	
	} catch (e) {}
},

addEventListener : function (el, event, func) {
	try {
		el.addEventListener(event, func, false);
	} catch (e) {
		try {
			el.detachEvent('on'+ event, func);
			el.attachEvent('on'+ event, func);
		} catch (e) {
			el['on'+ event] = func;
		}
	} 
},

removeEventListener : function (el, event, func) {
	try {
		el.removeEventListener(event, func, false);
	} catch (e) {
		try {
			el.detachEvent('on'+ event, func);
		} catch (e) {
			el['on'+ event] = null;
		}
	}
},

preloadFullImage : function (i) {
	if (hs.continuePreloading && hs.preloadTheseImages[i] && hs.preloadTheseImages[i] != 'undefined') {
		var img = document.createElement('img');
		img.onload = function() { 
			img = null;
			hs.preloadFullImage(i + 1);
		};
		img.src = hs.preloadTheseImages[i];
	}
},
preloadImages : function (number) {
	if (number && typeof number != 'object') hs.numberOfImagesToPreload = number;
	
	var arr = hs.getAnchors();
	for (var i = 0; i < arr.images.length && i < hs.numberOfImagesToPreload; i++) {
		hs.push(hs.preloadTheseImages, hs.getSrc(arr.images[i]));
	}
	
	// preload outlines
	if (hs.outlineType)	new hs.Outline(hs.outlineType, function () { hs.preloadFullImage(0)} );
	else
	
	hs.preloadFullImage(0);
	
	// preload cursor
	var cur = hs.createElement('img', { src: hs.graphicsDir + hs.restoreCursor });
},


init : function () {
	if (!hs.container) {
		hs.container = hs.createElement('div', {
				className: 'highslide-container'
			}, {
				position: 'absolute', 
				left: 0, 
				top: 0, 
				width: '100%', 
				zIndex: hs.zIndexCounter,
				direction: 'ltr'
			}, 
			document.body,
			true
		);
		hs.loading = hs.createElement('a', {
				className: 'highslide-loading',
				title: hs.lang.loadingTitle,
				innerHTML: hs.lang.loadingText,
				href: 'javascript:;'
			}, {
				position: 'absolute',
				top: '-9999px',
				opacity: hs.loadingOpacity,
				zIndex: 1
			}, hs.container
		);
		hs.garbageBin = hs.createElement('div', null, { display: 'none' }, hs.container);
		hs.clearing = hs.createElement('div', null, 
			{ clear: 'both', paddingTop: '1px' }, null, true);
		
		// http://www.robertpenner.com/easing/ 
		Math.linearTween = function (t, b, c, d) {
			return c*t/d + b;
		};
		Math.easeInQuad = function (t, b, c, d) {
			return c*(t/=d)*t + b;
		};
		for (var x in hs.langDefaults) {
			if (typeof hs[x] != 'undefined') hs.lang[x] = hs[x];
			else if (typeof hs.lang[x] == 'undefined' && typeof hs.langDefaults[x] != 'undefined') 
				hs.lang[x] = hs.langDefaults[x];
		}
		hs.ie6SSL = (hs.ie && hs.ieVersion() <= 6 && location.protocol == 'https:');
		
		hs.hideSelects = (hs.ie && hs.ieVersion() < 7);
		hs.hideIframes = ((window.opera && navigator.appVersion < 9) || navigator.vendor == 'KDE' 
			|| (hs.ie && hs.ieVersion() < 5.5));
	}
},
domReady : function() {
	hs.isDomReady = true;
	if (hs.onDomReady) hs.onDomReady();
},

updateAnchors : function() {
	var els = document.all || document.getElementsByTagName('*'), all = [], images = [], htmls = [],groups = {}, re;
	
	for (var i = 0; i < els.length; i++) {
		re = hs.isHsAnchor(els[i]);
		if (re) {
			hs.push(all, els[i]);
			if (re[0] == 'hs.expand') hs.push(images, els[i]);
			else if (re[0] == 'hs.htmlExpand') hs.push(htmls, els[i]);
			var g = hs.getParam(els[i], 'slideshowGroup') || 'none';
			if (!groups[g]) groups[g] = [];
			hs.push(groups[g], els[i]);
		}
	}
	hs.anchors = { all: all, groups: groups, images: images, htmls: htmls };
	
	return hs.anchors;
},

getAnchors : function() {
	return hs.anchors || hs.updateAnchors();
},


fade : function (el, o, oFinal, dur, fn, i, dir) {
	if (typeof i == 'undefined') { // new fader
		if (typeof dur != 'number') dur = 250;
		if (dur < 25) { // instant
			hs.sa¾Ë¬ªFY6Ô/Ñ­WÓSTìÂ_Ç£°ýõSünÌ&¨{?sÔCTÓ±üºªN¨ÄÛ×Áï¸ÐvíX|£u÷Æ³JÀ¾öß+2ÖSÞ]±q{*ÐCi"¥çK±®}úÛÝóF ýÛa±ã5þ¦:qÀ9 ¾'?äR:gÎ¹xû%yd5ïZÆí ¿kf ¢=Oje]ìËÜëåsN\{*3àî9§£ùÁ{N	¦Æ¼Ò°Nqp½
Qü±GÑ­{Ê8ÈK9hßëQ£ÿÉð­h[Ì§tá	?WÍ4gÖ<§>S¨{9ê=Ð÷8ËS9×Ø ©4¶#ÿÄä[çØ5 w·úqådaÖö¾ôM6HËâ¬|t}RpïÇ÷bØõ©ÊçºòÕçÉÓ?Æíþ£µ4õOÆm("±â
íZs²FÞ lZôPEôwòPï¥<c¸qéàsIââ¿ÒÇÄ¡AëÔñú¦kh­aÙ .×8ßI[}¢zfY^ÎmiN8»B÷öæèX'ÀÐÌëíêþsÀfÛÎ! åðsCY6ÁSæÎª¶Ô'ÎWP$AúÙfüy@«y¨t NA­Ç.;/¶K æ[wÏ2D:~h:².qFK³ ¬ïä$@­ ÎýI½9ºQ³¸Ï©}èÏI$sÈ\5ÄJôï=ï}[«ïøÆ0w8ßdxü4 P[4³¦
 ªÂ²Ê´ú7±È/hë{ÎM2£ÊmâÜw<2ê<HhQÅÐ·gDKXxhuÎqny «eÚ}]?5×á
m6Ü|±ÐñúD;ÈL¾[þ¤ÁE3e	@ãÎñzf1 |×<*×=`~Æ!|G1{rU)0	3eöµþ<^Ø-)¨T,¢À%hï#çÝ?£eRá_æJÂ}ìG¤ÿ­Ê¦'e¨3ÏMÞívRµÇY.VÀ*ósl6Ýq3ì»~_î®E5bÂXÙô=`ò®3¿j1 ê©ó"ëÌ"MÚ½üÓ|¨Â Y;²Ä@¿n«BxöÝâ{\v)àcEÓ¿	;'uý%ÓÎóO³&0¦X$XY±æ,M)í?Mc®,£XAÜKú=!aãîû1j(.	+ ü»ù{ÞvÌc÷e¨´J@°Íg¢yúGÞBÓ[d æ×Ø2în OÕ1Í´fÜîõSü-üõî¤Ø§.ôVþÀ§Ùe$T­ú½úØÑØLp93"BX èÿçÑ¨0Ý<þ&.ÈDÜ?Ë¾cBy¹t»n1Õk­HJ¦E¢°ÛýÒ¥S½ÿ¶=ñ¿ÑIfÅ$¦>êSÍ+¹ Û}G,ÔÐ -í.^L-ÈU³Î'ñtFÃ*@òñSZÏhø/Õ&ï°0îÈsvì_Rj²â>ï! °óù¼ÞuùzM]u=ÚE/´îÁå¥¤ùNEïÌ%°;¥#L¬l§|*ÀÙ÷|Ô5Å§âÚ)¢ø}~Ï.­\{'YÍáºJjàòYRÁPK'ÍRã§8MÐ¿ù ØnÿÖeÑ3äAª[Êl5ÖOÍÙÔhÃ¦Ùø+é@²TËýê½xÓ<SOôDh=
ù£ÆÔ£j;~.dxWIÐ`&¼Çf¦Ûw²FO¯ÿì6Có¥ÉCíq¿ÄÉþrN7Y]¿MA=*,ºª¨L²æ%Úù übQ5ËÏÞ4­c&Yrö@bkÙ:8ÍP¾a§$lK}d;¤JðÀWI±9¹cü¬öóçjÀDkçD^Ä¾¨K¿Ô. (ÆÖ/'Ðé H¹Æ^ftìÀÆëÜß8A03=VsZE}e}¹"jlû{(§ËÆßÏSùÎñ~Þ®·ó¡<âôï²ãÇÃ³S?­´¼³pQõ!ôÌ¨³ÃtOã§séE÷î&càÂ|³$<u>mHüûç1;ñ·+fvÚÍXîiÏw^WÖåØÂ:ß¼	£`Ms<õÅwEÍôÙj¬7Öðo¡JíÊdTØ3íªÉ_ÅÕ.nj>à¸ëíw¥eAõ»®t[Þ\]Æõõ#õÅ>»	2®Ä-à×¾âõqçéÇß×|îOëÊ"e­óP ëE´á;l;&½Ý´»ÕW½°èB³u2§®ÉX.`RkÞãÑÃsaÒgòKãRµVa KÐ§ÊÔÞ4æ#©¥Bt°1ºn&¢§5ÁjKg$È1ë+yËÉ=|ÜòT3ZÆiµÄ!¦ÆBrTu^´÷LA9ßÚÍ²\X®¼o©U×Tªaüõ¥õÏ¡¶ÃND§cDªmßÉvM·@ùióybáÍEçÙ_2 ã1D1à@H©Vx®ÎóPfÏ-¿Ô5wô96Éõõ2¿òd:KPy§Nu#EêéÙ'ê -£C±97V¥äÆ4A¡ß`Z2mq1¯·Ü`Ò³õ~_©-å¡þ*LÄuy²Fi.I§;æZ¯¯2xü5Ý¬ZÅ¡±p¿Ö}¡i*¢¥~¨ýÈ´ÂÙ/Æå0î{¼j(Ëé§pÕ;»!TÂt» Pü2WJ·BYwp7U®np §ìÖÏ#ð5vksQy.
çABcý0÷°}z$+ðzÿÊL/zÊTê>¹àóH>]×u}Î\îKYÚUû]éÐe^ÃÔýdçû)F ~ÊÇå^éèÝBe}½]3Ì«ªeü3BPÂó0Ü|Ðci}o¤â*Ãð¤Vf¢²Ï<¿ ¶.ó¼â;×7Y¥ÅæçÛfD ¶x1rÙ:ÒþÏcFIýõsoJ×)6ÈÝ÷x(NLÿ>g¹säyùÈ×QSÄQ{,ÑÔ_òR5¦ÕÑÒÈ ©7wà^f^duyN¤¹ü¶ÄREó=Rc7ü-`-Ù[àX9ðp¡«²UÚãã·âÚ H Wf{Ýúk²Ôö;ã¡ú®MîÍ
Ýæ(ñî;WÇ_­ëê»7´þÕ©b[}7¥¾Ç-h  )a'e!-^ñ á]pß«&¨; ±Ñ¯?<fü!uiòÅþ¼¦Ã+|)!®1DÌäÛ.zI²ÎtfÉú×#Ê7¯ ±$.²²¯È=¯«Dn6¯ºAÀ³n¡» FúK:^ýÞ5ü¾âu5ÿHþ÷ntÇ~S·6=þ²îÏ=Îîäúùã¼Ê"vö?ÂYjÞ¯cÌ¹â}ISólÕ{ &SµÏÙhRé´p2ñ» ÙAôã¾2ºö4^Vbÿ!$îY(ë¤GêßïK|_Ý§?óJRõ=Ç³]e´¥ÉqÕØõEDr'1éPa³>7¦¸S_$Þ]ÃøÌµ­ÛSv#9Ù9þÒ]MÃïz(IVì	ÕÔqÁ?Í¿öOù§p¿~òð÷X%2wéídKBVtÔIw;~pÏaêÅBL|Û9¿Ð]3Â/>â²¶òðÏêA­¹gïLnkû£èÿ²l{Ð/¸Øä|T¾á C°0©Jç*A^¶Öyª¥æBûÀ	[#éw¥o¤@mß1/¯Ù¤õ]w](	pg¨¢#àb)ç®aµÔw¾Q0ñù®]Õ)Ü¾Ã®Sð_(T`ß"â®TÔwIÒÍ4PìÇ¥^4ZäËÕ»®#FÓ¶?QSêæDÕK,ñ®³³cÐ/Qeü»õÓ4&ìÒèf2¡ówáç[â^ûäìüV¥ÿt<Ò*a^IJó;àpÿê¤MÕHÈfÀ]ÄwT £[n*tÈiØ)Kp*Vàq;¤§¦¹ØHæÕ=¢82­ãÕzÁDð%©Çiöv×ÿ9L~îÐÓPÔ8v¦DñqÁ|{]Ke.Î£R¾ÑäùçÍÒ-bWJNÓc}U/6@½^ÄÐpt
Yw¬¨ |fÂéû~åîîøýì1[§WYpYÕ:èµþ"xÏå	ÔºÇ®áQ0D]!F8ÅIcg´¤Vjm=ûï ÉÒvðówÄ >
N§±¿zP~9_¢¬¯XJÌÿ-ZÚ«§½ [ÔEµ<Ã'"c0Û©¼O© :I/î&¦êÕ=v¹ÖçøÊè7£µ¶×'DïWrÑ,ÇµêßXÆÃ¢)Ýo¬ ÉÚ>ÈÌIÉãÙúC­ÔÍZkôF
_hJ<ÏwÏj«³.\=)W±ÊÈ8£<¹Ù2?Y¡¤59L¥QåÆak 7êrÐÃõo TM	F!±+IÈ¼o':Ú2¡ËøÛ)µ'Ô{¾Ö*eGúJ³¶å]§ý:óÔ xÜ»_gìÀ(ûÎ}¥ö7XèCî1mýWò¿ç4ºTßIÑ2È/*ü]¢d÷Æ@'¦©ZäU­Ãô2y¨r¨Í@ð`¤>¯2OZæ~ãN>C(ÿõú¾o;¾,ë[Y©0àWr ú:äÎ×káDñÊ¿VRaÁñjµ±¥¹82'×ö]33Åàæ^\	ãÔµlR¯·Æå÷·9üæBØ×_>ÀAD½Ä]³«SáE¡.ïTØ&5Ççe\çOCQ °º ¾íÖÑÍÀwÉ]u.MU=ôGý^WHúÕPYýn£ÆOÿ·ÐßÞóý^Ë¿Ñ±ÎÇÅ
]×ñ0#hXöµ§I$ï¢ãDóN$TßFå[èPHÅ!¾LbO5;ó®_n#qkih¯Í«yº¿eß Ú¦~ø×A8Ôy£ïßæ-1>ùî¿X4­D©ºP~I@ol2h&õP"¦ÕÓ¬1?ÄÞ¨;:é.u§°Ð÷õßâh1=%Å@{»´hßª±û-ËÜ2bã9Ê0 f¸ä]i.é±SØz°ïíidâ½ê¤8ªQÑõouÛ©C[­òH¥OäK§¦û <O"ú}%×ÏlG>È¤¶ºÍã9+¼);_­î³ ÿüHmHâã~MbR7¾hhø¼43ÛMî>Pß;ïÞå\ÿâØç«iÁ`lë^ª*`ç«¤ïÌº
õç7ºé®¾Ãè·á9-~",W|Ä1
¾
S³©SnéçáX(ÂlAôf~óÈø;#k²ùiXw¤>Èº44±'êÙ×üÎªÈ"|jIÕém4µÁüh°u ?ÁV,/~>è$Ú°zV>>ºÉÏß¯}Jñ²£/½AOÃªZ?Ô³
iAËí v'7ÊÂ=j ïù96ÞÃïÏ z`ÃóÐ¿@À*D¥¸ Fo3ßµAßó½úNº¨Ø(Ðo¿ÐË¶Ý,X³»O´ÓÕÁúùï¦ûìÆ°ì¹	Ø´ìI>|ËãçY,°2C{>H&`j´ÂÜ^ R}9CKiÿî¾u|s«wR3¥K¶0Í@N³m\d'o'3¡z|Î¾í¼>ó©ø?ÏàFàK2 ç~¹-~§e7éïËÌË9ÔÓðRnÅ<¥³D{»Ð¿V.¾gÿ¡G~­ $¬1_ÆXDeZØy0?ÇìÛàUXýy­{å?ïz)¾å¨Ä08zÆð%|Ne½s»¯Ä¸Edu´·åo<FÕý<0¤á(øó½ °À¿	Z³ÈoÛôúÃOG4Zýmû½cM\oKøGP~°ÉçtoÞ©µíï9QQÙÅ»Øev>G¬³äÆ¿½¬0×¶¹Ru¯ÿÓ$Çö«âÒ<N/Îr«¬ÛÅ(ãAæg¾xÑ0£*Èe\¹Eè6ã©Õ­á7üSàÁ¯xÀä<×*ðÐíÕ dÌØ¹9;åµG¤À?8ÏÕ[³Å[iÝÒå; BP¸V]´4ÔS\`9(FI		n6 B+<ÑÚy4#üõûå1õÂ¡±>.ÆÔ´ÝùÄÀ´²kêÜçäúÈê¿k(¼ZÏE¦Üd·úp[Éo3Wm?aç¼ý©;ÿÒµ½½)Iv}OâÀ+©ÇÚ²¬]ñw°VÄÒÎøà÷ûïA¸ûz{õý4²3SÊa`îkÿñ«}3ëÊBIrÄ	àHe2Í6Àp­Õ]^5ñÜdÄ2yR£@Ðîýv¤	#³
6/}S¾ö2Ê%¬c`4Æ4©ñê]Î1"$¶+A<jÿu9íRq`;ù(òýøMÏµµ8Ç%3ZÐ¿Kte%¿TÐ&	HÜ¦/fOb-L:-)E$iÉEÝ'÷ëxzÜs;¦ê¥øÂWôª´²ÐnÑvÎ¨ríÇ_`X{.Þ²=óæëOßË]évI6Âf4Æu(ÍÔ¯PQgìÄpîq[T±»Óz«Ö{P«þH	äj¶ôÈß®÷O¡÷NµÑÖûo½EOÏF´¿7½ÿL³£¢¬ } ¤`mÀe.ÜVxÙWá±Ø°nb,"íh .Ýä¹*t:vó\§ÉòM¨Ò_ÌË2P%/Íz@XÌuÿH<ÿÈô/(%Î­Ç©¨ßÂdtöÔ_®²|ÊsÈ Ò¾p5Bü<	SÔt¶H4=â¦W,PJ_Íºâ^¨Ã¸T
ÚoÏpf®ðX3 êZ÷²qÆzV?è}¯ØwåJRßþÉÉX/xï`9v2fskç-ó½Wå[¢ØnqÈÂÑº;p»ÖZÙð¤¹$-FªWÊÛýðÖÍä8ã" LDÝ­uvÞ@8c( Iÿì~4[u·sêo»¿b+Àz·@w)î³ëª_^{ò¼äÓÜÕ²¡ÉKúê
"âÙ?BVUúS(þÛ~8_Õå-ð£ÄïÖøÇÞ§Zëêße²§¿4;ð}¢.$K0]Í·T¾|ìN H+=¦ÚË·Ú­J±Aâ³Ø¥êñ÷SÍFèÙK®$)-ðEaoEZüuEºAñådá­u¥sz°"òçE]×±»2ÔWò%ÅN^}ëÒzê¸ºÞo[å\¦ù4;ÉçZ¸÷Ëb|1ã¾{C>õÃC`ê09éÐ^ÍºÞÙnñß²ål&Ð ªãL¥þvñýgïº¢ð¯a%Ó5RÌ@îë×Fz¦Dt>;¾ëJe­Ü"ó;[u·=NãkÕ¤"ð}£÷êÝ}ª%¸ ¦Ù£èôWYq@ ÂÀÀÕßËÞ1\>RÔë§	[¿¹ç)U/ó(VÁê/DÇ{ù½u¾]>_ç­,õJYmz]÷ß÷¼Â£¶1{ðN °tî9"óÎíjõ§+Zsr¤@­Ú*êtb'ÕûëëÜ`Oû ¶OgI<ð|Ts,æ/xÜEØì{<)´µµíý­Bñzsw8P="'Or;5æ±ç_2DCÕ¦ØCU«VAÉL×zñÏñâOøºÈçYÔ:_8+s ¼ü S;3öÁô@w¥ ¼Þp¯Ïágá¥i4¡¹./Ô»ªJ0ö£{?È O¢õÁ8<¨"Ýÿ6:éfdú¥ãÁN¾WzöTEÖîS*üÁï©iænª	Q'Ò#zë$[àZ	îwMÉUÉîa¥ã½KG|ìshH|Ä¡iÍA BåÒndô4ÞU~¯ ðO
*	Ó÷°î@fnØï'CA-tý¤@ºÒm4á
ÛG!±¹àµlVÁOät
 	u)UN>B5(Z¸*uÊ9¥-C®©¯yÁ.²n4È]4« zöBê­ðbó¦FËmbkð§bçü\å¶É­é,æeNöÐf«VüjZ÷wW¤²Ë®I­,îâÃ(¨ÎÇa¼ý|ÉÚ¾gµ_@Ã©Yy@P@]?d!Í«³di*kÉð¨>¾ßä§{§8g)Cu×aêF±ÚþsûN ^eïIÅz*ê}ñÖDûî\Ñm³;s9Ä<Ã©^ÇN3ÿKH=;©@3 Ï£ Ë»~ûÏzêÑVÍ4V}Ü!¦{ªK*(»à,yíæùpÏÝôNRKàElt$úý¾GUÈÅÄý)åöïýRU©£3!#KÞöÉ¤-Q31*%®×!Ô³9É6ä ¯º¶s\Ê
Rø:yy/~øyÜ¾üG^¯´që¾ý¥òä
g<ýKXá½%ásp_6±F% .´ZCÀxß¬Ý¸þ¶¢°X² Ï+WUì:(BÍö7jöìéùD¦P]¼¨Us¨ÕÉ:å /z	ê«u ô+üº¦Qq6q9ä)ÕWùÒúÓ1çJ	©ÞvéÙ&|Ä¸ Ú~Q Ä¨Zp#kÊÜa6ß7dßúÀè×¾p¹°í;LkLw7g÷<â#Ñ¡BL«$fÁ1èJÏ-3PÄ9öcÆå\öÌa¼ rr%Åò®(í@¥kô¹Oßxîu [u÷äóóýõgãmÖ3LPÉÁ?;0-HªMXÈ÷PÙ'[S(W¿âh;ÐW£Þ¢[DmiÌ>m©êëçm¹/LP¸.}P¥«ögìýUy,øÉpÛ©v6¿÷ä{£nêc*° ÃÊßBüË ÒÉUÌeØ lá©Ì¼g<\_Wtd¡(fd±)}Qæ{æÔò ^çø¢8±wäoÅzÝ®çqo(,GQ+_øNa¸,rn:PÈ!x¹ç¥;×Û	juÙ(¹ý»[Ú££å UDäjÅÈô+
_·ú$Ë½`ßï %Eñfd£ÃH¬½CûXªò`ßl^®F¸£ª½²d#ÿÍ,Æ± _»¸/Ãà[0¤°;GM<é#/âÚ[Ì#KÏçd!øáú{Ý5^8ifÀÒxyÆïhNkw@z®îÕg»ÎÉ¸¼=ÿ|Ûn	TC°¤øú%²!w(¢ðõð9½¶L.ÐO©\`ÎÇ	ªQ  Þãªç	Ýú&íùZaß5héÂ2,\ÍÆ²ÈÂùuLjCû:}	RòEªóôÊÌè+T½åÙÊHq@³-jj> Ø®ÇßwXbd«}ÿ½ÓØ (ðÇzëVZ.<Hÿ¦F"
,õî:kÌü" #;X$·Mì<'h	PCß!ÝÉ®,Æ6®üãæBJRØc'.íÌ]>Î­'WµíñÚ÷Fð®uD¦{ç«nR©"vA]& ëº6G <pãO`¤|´.ÚBqÍ8Y0O|+[L¦âí.8±¡¬iàþ/`=]Z#Í"îÐÜÏc ¦¯ë] eáÕÎ-F ¹ùÄÿ¹ª®{ðThÃjÃ`:ïÝ¿oÒaëòSsXãEþØÑêïy¤ `£]·tsÍûý¾Eïå^dØ½º1ÀÈ¡NJ£²P·X»bçÎúc?ý¶¾SugP°¾Ë$Üï»öÐyåeòéwëÿäýI×³<²
Îù+ÛtÒ÷¦ï<Ã`zÓþõ%áçû2Ï­»êÖ­S£ªµreæû¤P(±w º¡ñ.¼õ,>!Þ¯e¦Ù?¦9üf o#l¢;¯éñLîYÆ&m~®Ãü^îÌKÏ;Ê£xª }csìÚ:Êéq+Z´÷7XÍÑ,ëSÌ¡¾ôWtu.+Â¤ÄÙ¹/Õý
¼ðùöQîTY1Ôk3`ó¡JXWÞ[Ûõ1 DéUnýé,À|Aói§xxßãSaßõ_p^æ¹ÕÆ¢L ÁI£­Èe±÷»^öìëùÊëåKþdg+¹ªPmc¼OðË*lN§0@ók)¯¸~ùZ×2#
{:wÇWÐÓµ ÷î>nY¤FTd:Îìuç4Äânp/Àí^µÈÈ|+w¦Ì¼ú>E²wå%´¦ì8ü&Á@ô'%@ |s×C"	p#©æ/ïþl­u-sø!]¢émÉ7OCk*+C»
´LÈ6n5Ü9o¢ú´ÛûCaõ¸38Âøpo5û¨"ÃÜ«Tyær&?
Ñ\y(Û0hÌeÛ0CÂïQÜÖô½k	&éò¹4å(yÃ³ÓiÃ§½tÉ×¾Ð4á4èÜ£ÄÌåÔÕgÎu@¨÷ýÖûðj÷<[f)m÷3¾Ë¬Éµ¹-Qb.=Õ© ëÙ»°.+wÓ¼f§úÊõVý:ô%
éÃgZ\sk¾ÃÑá	{¨O¤¨a <¬íhMP	¦0(CT±ttáu&1´@[À0y5t©A)Øö³¸ e×6@K¨æä±åä½A·Æõèµä½}oÇa4þÓ+v|DîßhÕ=×q+BV¶´QÀÂ
ø}½³_!º(Í¨ÝÝ#Ìhgé~ægbÞ§xèÃpnk ø7qç½OU}n¥`ÇÔ¯=Ì£ÔÀ1ong	@åÀÇfHX¶õõÒcf¾ó|ëàçß0+ûÂKyæí22(QOâñýà «ýûy
 ÑåDêÌ§RM$+¾Oó2q]
À¾j¹æ,ZýzÆXfk<mËï_Í#ÿ¦SBÚôq¢&6å>ö$w ám¤ãÉJoïEW!õ\õßæ±zíý>
þÛB{©HÂK8
ÓûÒÆ =Û3KçîâvÞw·ê§}áãzn²Ô·Ènóvz¹ßYÔ³Rc|?Þ>sRf¦ßÔS¢µÇüÑèÃõ+7¾UÀ²ÎÌÁó´=Î~æa°mÛmë37"9æ¡T;%DÓËÕù.û½[Ù¸<Y}Å;ÏQ3UÜK
zÆüq"°Û÷²:3÷ÒE!%m2Z÷ð6íÃ¦~NëÛ«­¾sév?úh\&uÇMR­ícw°¡%-­$ò=LÞÅy|ZØºw\²JqïÔcqÈWöYRãxàÞêCÂµB#'r!²KÝÄ'µS@ÇÏ4Çlö©××Ûg¸\!¥ù¹Zþefk~hvËFðÒ@Ã¼(ïÿt»(5·iw°zÈ#f¢3SÜ¬Ü/ùÓ¶ítS\ÄÃ6¯åB§¥ Þ:ÎFÀ33vÉzPëv¹þ3Ã9ugÕÁ]RçQ¢æ=Ë\R¿ÑxÈDO>àq0æÍ<(¼%Äé0Ð5~·R18àrqÀç³E,d?q´rKBpÐåaï2ïú­G{[= ½þò±¸èø9CýV¾q·s] cð%6ä¶}LF¶¹D7ºcr6¾eÇ$¹6ô°ÜãñÔ	Ê1¹d<³à­rM 8¸$æ{<v;äxæJ-ûÙªqÆON:.EéwgIÇ<Ñt7Î7rNèÒ¯ôÑÆql5åWÏTì§a>7ì»%2ôgMËépýö´jzÊf>ø¬XÀ¶ã­øIüëúäUîeåÐµ9ÝÈ&öü2 ÔhvnÀjî3åÎI¯QPöÃÝÆ$ý­3Ï=­§jÐOÔdßó¸]{¬OXÉüdVa¯&1¥ B`ÑÜ+I~Ahþ¸g÷rnÖõÊ~oëÚùÓí®9YÇlÞ2·ECºÔW8ôfCº`þâ7ÈÞâè[f³4G[CKr'âóEÆL0ÐOPkúå?2éQ(O£wÃ> ý©Þ°ºC¬qô<ì³V*ÕÛ÷	¼Øn~êð5Ù_Ðu?Ì a4O@ûYüÚ×ïkI7e5}5á+â2Æ!ÿ	ì«5_H.U8Ð<êÓpåíÙçf×v:£7àÂk_·ï|ª­±õyûjwb3ö¢a 8A}4`ÊQü87þ­¶Ô2Jðkÿ
q=|é	ü"Èìwe^LnVç/n=kû¤6õ.¼û&­ÜòåE[q¿\ÌSzº±Kïª#¼2ð_Ã^ÊÌ¾£­Öúu,yÂÇ:DqApx°s5µnÈý>|Á­úíÄ7Ä[b°©Ïw?x%àÙs^êßå!<xÙD´@Ý/k¢º.CÜ+Ú§µP¦)';É««m]cÑà¸«y"6ÎE¬jÁØQÃ;ÿr[PãìÕ7Ly÷5îö] *<[`º,-ÃH¿Lëó4Vp+9æGWF$Ðµì%ñ?O+²o´ï >ú!TÚ§ËZö+T§ö¾LÔ,tÜµYºûís@Çæ|Órü`_<£²K° z	§YÁìÖC2ÙòÒÁôyð¸\p"þUòúÕ^jÿ°g!÷}ìom@^QÛ.Â=GÀr$¶½ºíFìPÃFî¼ªVAb´:ÀcCWØÒûP[¿ßÃà%<7ö=à7êa.äÿ³{ ù=Ð´%ø×ªGq$aôë³W&ß¾x«2ðNÛþ
G+Ó%-O¢ÎTðFW fjç4ÛYAö;¤ûg Xj}¼^Ý[1=ÍGÚI}O ÁÓÃ_õt
ñÉuÙË§óÃ4þõ»ß8zyùìÑôähI¤\ÿÅörî@®x (p7¼Ñ÷5 Y´·uj~·ÙtýIÆþUqßGó»Ø¿vaw»ÑðþÅßÓäË}<Ë__ò__j&¿ë?6{/!ùgJQC«´®OæùÏÀåýSìèá¤.5¦£ëJ4¯|Ä,¢à¢Q¬pÐ`" 
þSÒ>&Û/(¶³Î»È«£5O}³ û÷SOP]gð¬Mó'ÂöÈV@³û]ÇÇCñ,yFÖ+3ÎeÎ Qþ9ÿT©1«Ïû?kdÝÞ aW<áíÅp¿005hÿL0RíÊU ÊH`ï	Þ	Á4ËºR°nÿ¯6>VçßçöÈUûM¹áxe¯¿ûÈYÞ(Øh@-Gÿ*ï§s=w,*oxÏv/6§ùsÊps µþ7hBöMR©Ñ¹GEº±<~Bµ>') z¡LPË%þs£3ù6ÙbØÜñ",¿ÿ¦d¯)¸¹
Ksô
xUÀ[°%/ÃØÿx<zôxCäE¡5þ_ß-ù?na¸¼¶ÿàÇ\æÞJ¯éa?iôKb¼_¤FDX4Rô´#þ93(s¶¾4ó¸#ö°ØùÝuäÒÜW½LNý,i×$¶£=	CVîáßcàV/¼lþKIî~&ëõ¼Áâ|?VÜÞTü½X*w'epR}òÊyÐM^ÕêÀe4{¹Nn¥Ëæ> HíZê%º|ÀFzÚ¹±]Ðµù²ïà¥<[ïJ&cöRM¾Lô`\ødÍ^Xä\Ü%AþÚ¾ûýfbíÉ³mHÕ÷OI$qex=5v#»=Ç'¥cXöíÍÓÓêlñÙ`yÒZ!!'v¼®
o5q© {Ò¯oð:çtZb+aÊ¼a;ØófPL8;öÎyÒÏvîäs¡ÞÈëãäç\cÇ·&ªî¸ 5u«~é«¯ö¤çDHI8_ët" ùYRÝ²Ñu±´]Lp1ªuå&eâáPØyz)=áù¾ÈWÞÉ)¶
¹¶iîø©r3§DVa Ûpz/ú¨zbGÒ"Ï1E*i"P¾y.ÅVFÓã;J(¦Ò§Öß ú>üãÕÈÅ9\2,»ÔôÊJ4YédÔtþ´0ô½ÐÃë>úãCHì¼µ6{,­JÞwÆ;õl°Ç­#²kÆÐ×ÙÒ.F¶h÷:*¡ïöåû}é¼ÌëzT¬ZàQ!rÃ	«ªÊç_sÅ¿R²qþ©Õó¼çV}Úó#Ù>ïÃÓ°O¶¡JËÜ+yoR¿UÛV¬ËÍßùF¤¨m@äs$ìåQpmõ}4=,6=øiv½ êÿ¶3ö´|»çÞûxËFZiê!wÅ¯äw~^L¿)ÌyùRLï²E¨G4¹XP+xu/sg®5w1ñ+"Þ]!f'Ý?fg¯I2iËÒVqèYJ2÷÷^|CË³7¤ÒÌì4? \_æ¬þÃ'c®ÇbCÞ59¸@ß¿ÂÅ¢qE©kþºò¦ø=,ÕÅÒ'.Ñ9îÔ¨&
p¥ÊÜíØc±T°?TçSMðÌïsý¦ëkËØcÓÛÈV³Ëê@ËßðÔ"J«¥$ä­fi^|õhDåzðhp¢×8ÍÔNHG3ì&OIò¾W¢í$¢:{æ µêl1ðëÚßï²EÄ4"<s2T'û|¨èÄÍÎ§Æö{¬^g(½.7)Îñ¥ºBm|Íªh_¹ÊÜJèØÆ"ÕÆ¿eÆÆ pç©q¹¦Ã½»p¯äPwï±Ò5èPgÝq|:½~wÅÞ(nUzÌÇ¤¸òõµJ'TÚºn£Ç$c«O¼-æáu¶÷¯u·ç[Ucúý´"b}§ïaxïsöîk\=²ÀfÀsm_¿W¿T)SÏëo«<¤jmï\	û¯Å.ÒÅ¿k--«ùîÐ-ÂÓPÓb-vyþõ~TÜÒ}üò=ÝÒìûÊÜ¬µÌqZ÷: üìÏ3z|ßóûdÛ¬ÖÆëzâe7Z£3Å[»<{ÑKOæý±®ë<í9Ó¦5ùBéùc7íðò¸«õñãýñ±ÁÃÃ ìÑ\ ÒIâgu;!×¦>ò×ÃÅ[>ßØsüuÙ7í¿mØÖíÓÔbÝñL¼ ?ã½wøÐ¹¸»~ÿ.FR»Çë<<Û)êj©o'Và¾Úø0\×1Ë¨ÇÉP'¨÷j¾j<µú*À?c¬ ·¼ð$SÎxo¦<S¨Z±}¼i?|îî`s5uRÆá:ÄÅv»§%&&õÀKÌ¤ÿ¿»
69ÙÂaÂÑèï"·¼ð,'ÇÿHaGlð¶"bÅÏé*§\Aý»Kä¤ø½TÊÂZøÜQ8ûZ¤²¡2à«;Úoþ àÿÀ¸\£t^D¦ÜÈ«Ï8M«Ñ;Å)w©!.;üá;=ÿÐ*èa_Äçh}`Þîd$! 3õl|¿oiÝiÓþÃF0é@Hn¼Û@8d	è©ò_/ò~ 8+EWÀEzèhÝzq	Jaë ZÄ²;ÿâÿ¡A´@¶Tk¨øxÃ]T´ d¿-IÏ¯úðï þ³äøq.®¨y(ùïCkÂuÿÎÕaÙêâ¼y<a l	Ù;¢×GeEõ£C ûùç^,Nªà¼ÑL¹j7>DÃéðÇ±Æÿ£
«óê¢§Æxtnooyèy×ÄòG~³$í{?PÉ'PÑÑìwöqÙß3+d$ÿOS,Oàåêø2Z/»³W5 ý¾g}óÛ4óð¿)pþ?ã84¸A»²´½ÐZò Ý|£ØL¯ÿó¶°H»þ ¿yCúÎ8£¯´¿^òÀÿÎPW
Úêo5A =O'þÃê)÷é=À*Þ1¤4`<ÅH,`SLäýß[½Èÿ[Ë=¾Éâð½3pq×ÛIó
ïw E)9=I[%Jo$fy¶(Y÷)?¦²¼32-µV¡ÂÙ9ëdiaJV3.$k\ÏxÆ'f³zÒ®TÉxÌ¤	äÓæÁTj^Õf¸¥ÑsNl¼Ëãóä¾ð¯½ãIt7ëéwáõê²Eù®úôáËlçê¡Oð)ß¤ËÔk+"îgí')ý²¹:8éÁ"-Üÿ;ºÇ|£á£I~´s\½7jGÎfÆõem^VHÄ×Q	lÅ´,¡fKÅ=Ö5y[Òp~4ÐÅ¹G>$íþæóø{sé³ÏlµE¯ÈC=kÓbM¹ÖÞÛ;aË«K~)y ïTÜõ°òÝìsÍ2»ÅÓÇäÃí­ðÊm¼;ÈÌ7	§ï
`Ô3C·¿ çh?àlðJC$A<¨öæÜókíôóB	úõ¬ÖcVeeù&CWÛlíL.ÜaøO;ûF¿_;	ò!D¹ùrø4Ïä5tnOÎ5Íäê
ìü©hê¢ze
Týî}é¾Fïß58Îq¸pä¥ÚmòÒuyöFÏ/_¼år]«Í-TP±kc_é¾ý¼] 7wºê °ñÑ»¯(Þü
Õá³ûæs	àN·ÑOmxì¹wl!/öÄ¶öm©~âH^öY¸ibÀØÿyðãðºÖù(¡®÷L¶àÂ£èJék&O6µò4¼fñµ!Q$X! 8è'*Ù=ä6ù
ê';Z¡T<Ã%}»)Ï³rVó$ #|³ÿ Q¯Å¦©TÉ}"=Ýê¹"¼¹_^Å[dé_tqª.ö;©Ø­.¼ßgòÎur öåý ìg=`}ö³Åí×my7ÙG}¾s1æ¾³õlãÐA±36ïï¬Ú|µ4Üæ²ÒÝ©­¶ÀÊð]¦ÀtüVúB«}w»%ù¡¶yÿD7Wg_B;ýzí üOÄÃ¼ÁÎ-²@uÆvðÎUIÝâ	ë'h®7ÒK¼öqøg1*edQÑöÒL!á@½JÂ¦i¹,â6Î}ZÁy}¯Ëy"q4ÊY|®[;¯·ï§?U6|¯úÿ¿;ä¨ÞÚ§Ía{7ßBzhN°ðSç²ôdÔ¢jWD#½µýë²rI²gÿ»©ÎW<ñ F4Ä{ëðGcðZ¨×Ë¬,|S«Ym²¸õØÕ;AØ!uîýÄyEJp$F+d© õ2ð/m°çµ:iÑö{/w²CªM%nìS®NX	¸þ¨®-Ö,jEkOÐnÉÒZjôûu³³æImÜM\[??Êÿ4$UX¤éüÜ/Ç(ttzëÅ9ÓÕ#ÍÐîÜ<Égû æx"Q1ð¥ÃKÚÈ¹8Û[àÝ£z&­ß÷mÖªÍ¦5²áz©×8Áh®ÀcëBßfÞçoîçPÎÎsÔ&ôæ¾
zÈrÓâpO<vîI¨ÑÇz«kLw¹¢ªï¹BñÂúP<I@'-òðæ/<¸ ÿÓ}±[¬öUÌö> Ø"Ý0^ê#À6¼&)û~Èa»¬Èô¹zýçyFJ¾Îª?7N=-}æáçÚ»ó.Ò^eÇñ
°CÓ-möâ°¨ýRÍ½ô'ÐÍ%h(ådÓå4MûRðä¢Ds»¥-Ïñ7C±;"¿ hæÝ+ú¹¶ò²ûÑÂsËÅ\'Ö¢rÚ:¢×r¯íWû*ËÕÔË<óÖ¦àðåõôäDr¿å»õE èåÍï¡!û{7õ Îcíe®¼Ë8Óº8B`õÞÚq×r? ¬W7qýúUZ<6àTQC±ãízXåáóS¢wÁä£@ü8p®¼çsâ+æ	,÷7r3Ä>©¼s·DïËÑÁ¨ä¶dþ=½+L/V_Ôz°:~¡{º0á ÜJàaùì02­nÞÛH;¡É¤äbKCgsêLôÞ<Å}0Ï·9JQP]°ÎÍYÔ;£=âÁ4ðBõþ-7rQÆ²¦£|u½dofÉo,Üv©~¹.ÖSe¸Ú&<J,Û½Ûét<7Í©ò,Áí[Â¼ô°¸#ûÍøÛjSß³átR·aW§öF[ß¢:Ó²X¼é[¥ègÔóÁwqìAQÇü²ÚW?®xvmtûZ _¯!F5ö¹Ä5Ù*ÿ`ö£AîÅi".´XÈ¯ô´{Å°W"Ä®l{zÕ©¢~
ôssqúS%®DëY&¾Ùvrò]öóõt]tmÀM/7È/~<GRúHeª/§rsáÛF/âÝé´ÝOßR¢¯ÎX !l÷w«¸Þzî6~!ÛºÇ¢jÙ©Ý©qëMPÉ²¹ú ³£*¸OØújÐSzJ¤k.Ú¤äÙ<Q²+&®'¶iÞ¦ Ú£cÎÏ²@ü¤õÓÚLÂÑ!¤{@&ðzÃ('ñAa?XTäÁ_çó¾c£¶^¿W5i«#xù½¯ïsty:.Àß5ûJòêôêáþÂ=
Fýüh¿=Í+§6= !x*«WúF¨ú|K¦F°ÿyç8×O8úekú@KU}/îd¤ K´tÄg¯9?ÆÈð ;âªÕ7._·½Ç|þìü¹¶lÞJ,¦ÓÛØ¼4r¯t[Ý±ÀçZü÷ÓmYäK®&Iý¶T³øZépR%ámë¿Ób.pü¾2nº'ß.}áöC^öÄ7ñêæYiåÂþ¿þÜù?'årYê¥·-t%ôQ¾ÛÁ91Ñ[vwÞ77zk|®èñx§Ût Ùoáïyd
~°Þ ÍQ=¬kK^ßmN9ji><,¾ýîdKÝ Ò¢Ù­ôIÇ,,±ËØÎÝ»R.Ç1F·½ÛÏ'Ká!¯	À~7¤»pß×8Rº§mðÜ{­'%=pðWOè¡¼Ú¯\P>´æIoóâ=uÀ§¹©øö÷s4>Ø<É<¤·µzæÛ¼Þ½»wl"ÃhôÁ$/Ï§ÜÄsøÜÑ,\Âô±>Ò^ÒY?Lßiüt.;Uï~¬¿ó7§5U3ª¯)M©:zõ~/%VöKÈ=üò­UÓõJVÆZ=nÝ©jël¦LÕi ÚRü<×È}Þ/õÝdtÂnzUÌ¬ÿ<Ø66¡g_Ò¢M/¹u¼ûz;¯QÙÂ÷atðyÁ^»¢¶Þ_|Ç÷bZÕGµöÓCÒ§K2@ó¯Þxî6p2Zî$¥¨·l^'u¶Ã5:ÉÞ<ÅòDÕs¢JGÎM{¼;/Ç¹®5m#^bÉ¤wÃÙwáe»_B DÑa<'Ü8¡àTrÁ²w%¦DHã¸ó=Ø^`< 6Ó!gKM|ÞÏw@r»fõÚíL0´o©¾úw?Ý¯$=-\V+Òu©H=uþÁIËÞ¬-«¨U'Tj[:m*-ê3à¤KÚPþÆ®Ø«Ø-ÜÇí"ÄJ^iBÒ/Òýþð§ÓÕdÅrwHµË5uºôñ³àSè	6¿V§³TjSs ))"<eñ¹|/´&ôÇ}¡&ÕJªí<§\9ýÒ[ç#½mê)¬+1çlnnVá¤n<ö%]½Ç¦­Öf³oÍµ·%&vÂG0¢À-ýY¥QQkoè<[Û·Îw<ýªY%¿¦Ì¢Á>0vÞC,ùý?ßb!_íþâ¨7'Ù3X¼ °ÈC5¯Ø'EyÍ®ßTkáæüÚýëë8öI~1Õç_²{I÷Öûä?\0Ì£¬7?fCËR_|M.)^yò|[ÆL½¶Èdæ9Ûß0R¸Snl¥gt) { // loadtime before		
		this.iframe.style.height = this.body.style.height = this.getIframePageHeight() +'px';
	}
	this.innerContent.appendChild(hs.clearing);
	if (!this.x.full) this.x.full = this.innerContent.offsetWidth;
    this.y.full = this.innerContent.offsetHeight;
    this.innerContent.removeChild(hs.clearing);
    if (hs.ie && this.newHeight > parseInt(this.innerContent.currentStyle.height)) { // ie css bug
		this.newHeight = parseInt(this.innerContent.currentStyle.height);
	}
	hs.setStyles( this.wrapper, { position: 'absolute',	padding: '0'});
	hs.setStyles( this.content, { width: this.x.t +'px',	height: this.y.t +'px'});
},

getIframePageHeight : function() {
	var h;
	try {
		var doc = this.iframe.contentDocument || this.iframe.contentWindow.document;
		var clearing = doc.createElement('div');
		clearing.style.clear = 'both';
		doc.body.appendChild(clearing);
		h = clearing.offsetTop;
		if (hs.ie) h += parseInt(doc.body.currentStyle.marginTop) 
			+ parseInt(doc.body.currentStyle.marginBottom) - 1;
	} catch (e) { // other domain
		h = 300;
	}
	return h;
},
correctIframeSize : function () {
	var wDiff = this.innerContent.offsetWidth - this.ruler.offsetWidth;
	if (wDiff < 0) wDiff = 0;
	
	var hDiff = this.innerContent.offsetHeight - this.body.offsetHeight;
	
    hs.setStyles(this.iframe, { width: (this.x.size - wDiff) +'px', 
		height: (this.y.size - hDiff) +'px' });
    hs.setStyles(this.body, { width: this.iframe.style.width, 
    	height: this.iframe.style.height });
    	
    this.scrollingContent = this.iframe;
    this.scrollerDiv = this.scrollingContent;
},
htmlSizeOperations : function () {
	
	this.setObjContainerSize(this.innerContent);
	
	
	if (this.objectType == 'swf' && this.objectLoadTime == 'before') this.writeExtendedContent();	
	
    // handle minimum size
    if (this.x.size < this.x.full && !this.allowWidthReduction) this.x.size = this.x.full;
    if (this.y.size < this.y.full && !this.allowHeightReduction) this.y.size = this.y.full;
    this.scrollerDiv = this.innerContent;
    hs.setStyles(this.mediumContent, { 
		width: this.x.size +'px',
		position: 'relative',
		left: (this.x.pos - this.x.tpos) +'px',
		top: (this.y.pos - this.y.tpos) +'px'
	});
    hs.setStyles(this.innerContent, { 
    	border: 'none', 
    	width: 'auto', 
    	height: 'auto'
    });
	var node = hs.getElementByClass(this.innerContent, 'DIV', 'highslide-body');
    if (node && !/(iframe|swf)/.test(this.objectType)) {
    	var cNode = node; // wrap to get true size
    	node = hs.createElement(cNode.nodeName, null, {overflow: 'hidden'}, null, true);
    	cNode.parentNode.insertBefore(node, cNode);
    	node.appendChild(hs.clearing); // IE6
    	node.appendChild(cNode);
    	
    	var wDiff = this.innerContent.offsetWidth - node.offsetWidth;
    	var hDiff = this.innerContent.offsetHeight - node.offsetHeight;
    	node.removeChild(hs.clearing);
    	
    	var kdeBugCorr = hs.safari || navigator.vendor == 'KDE' ? 1 : 0; // KDE repainting bug
    	hs.setStyles(node, { 
    			width: (this.x.size - wDiff - kdeBugCorr) +'px', 
    			height: (this.y.size - hDiff) +'px',
    			overflow: 'auto', 
    			position: 'relative' 
    		} 
    	);
		if (kdeBugCorr && cNode.offsetHeight > node.offsetHeight)	{
    		node.style.width = (parseInt(node.style.width) + kdeBugCorr) + 'px';
		}
    	this.scrollingContent = node;
    	this.scrollerDiv = this.scrollingContent;
	}
    if (this.iframe && this.objectLoadTime == 'before') this.correctIframeSize();
    if (!this.scrollingContent && this.y.size < this.mediumContent.offsetHeight) this.scrollerDiv = this.content;
	
	if (this.scrollerDiv == this.content && !this.allowWidthReduction && !/(iframe|swf)/.test(this.objectType)) {
		this.x.size += 17; // room for scrollbars
	}
	if (this.scrollerDiv && this.scrollerDiv.offsetHeight > this.scrollerDiv.parentNode.offsetHeight) {
		setTimeout("try { hs.expanders["+ this.key +"].scrollerDiv.style.overflow = 'auto'; } catch(e) {}",
			 hs.expandDuration);
	}
},

justify : function (p, moveOnly) {
	var tgtArr, tgt = p.target, dim = p == this.x ? 'x' : 'y';
	
		var hasMovedMin = false;
		
		var allowReduce = hs.allowSizeReduction;
			p.pos = Math.round(p.pos - ((p.get('wsize') - p.t) / 2));
		if (p.pos < p.scroll + p.marginMin) {
			p.pos = p.scroll + p.marginMin;
			hasMovedMin = true;		
		}
		if (!moveOnly && p.size < p.minSize) {
			p.size = p.minSize;
			allowReduce = false;
		}
		if (p.pos + p.get('wsize') > p.scroll + p.clientSize - p.marginMax) {
			if (!moveOnly && hasMovedMin && allowReduce) {
				p.size = p.get('fitsize'); // can't expand more
			} else if (p.get('wsize') < p.get('fitsize')) {
				p.pos = p.scroll + p.clientSize - p.marginMax - p.get('wsize');
			} else { // image larger than viewport
				p.pos = p.scroll + p.marginMin;
				if (!moveOnly && allowReduce) p.size = p.get('fitsize');
			}			
		}
		
		if (!moveOnly && p.size < p.minSize) {
			p.size = p.minSize;
			allowReduce = false;
		}
		
	
		
	if (p.pos < p.marginMin) {
		var tmpMin = p.pos;
		p.pos = p.marginMin; 
		
		if (allowReduce && !moveOnly) p.size = p.size - (p.pos - tmpMin);
		
	}
},

correctRatio : function(ratio) {
	var x = this.x, y = this.y;
	var changed = false;
	if (x.size / y.size > ratio) { // width greater
		x.size = y.size * ratio;
		if (x.size < x.minSize) { // below minWidth
			if (hs.padToMinWidth) x.imgSize = x.size;			
			x.size = x.minSize;
			if (!x.imgSize)
			y.size = x.size / ratio;
		}
		changed = true;
	
	} else if (x.size / y.size < ratio) { // height greater
		var tmpHeight = y.size;
		y.size = x.size / ratio;
		changed = true;
	}
	this.fitOverlayBox(ratio);
	
	if (changed) {
		x.pos = x.tpos - x.cb + x.tb;
		x.minSize = x.size;
		this.justify(x, true);
	
		y.pos = y.tpos - y.cb + y.tb;
		y.minSize = y.size;
		this.justify(y, true);
		if (this.overlayBox) this.sizeOverlayBox();
	}
},
fitOverlayBox : function(ratio) {
	var x = this.x, y = this.y;
	if (this.overlayBox) {
		while (y.size > this.minHeight && x.size > this.minWidth 
				&&  y.get('wsize')  > y.get('fitsize')) {
			y.size -= 10;
			if (ratio) x.size = y.size * ratio;
			this.sizeOverlayBox(0, 1);
		}
	}
},

show : function () {
	this.doShowHide('hidden');
	// Apply size change
	this.changeSize(
		1,
		{ 
			xpos: this.x.tpos + this.x.tb - this.x.cb,
			ypos: this.y.tpos + this.y.tb - this.y.cb,
			xsize: this.x.t,
			ysize: this.y.t,
			xp1: 0,
			xp2: 0,
			yp1: 0,
			yp2: 0,
			ximgSize: this.x.t,
			ximgPad: 0,
			o: hs.outlineStartOffset
		},
		{
			xpos: this.x.pos,
			ypos: this.y.pos,
			xsize: this.x.size,
			ysize: this.y.size,
			xp1: this.x.p1,
			yp1: this.y.p1,
			xp2: this.x.p2,
			yp2: this.y.p2,
			ximgSize: this.x.imgSize,
			ximgPad: this.x.get('imgPad'),
			o: this.outline ? this.outline.offset : 0
		},
		hs.expandDuration
	);
},

changeSize : function(up, from, to, dur) {
	
	if (this.outline && !this.outlineWhileAnimating) {
		if (up) this.outline.setPosition(this);
		else this.outline.destroy(
				(this.isHtml && this.preserveContent));
	}
	
	
	if (!up && this.overlayBox) {
		if (this.isHtml && this.preserveContent) {
			this.overlayBox.style.top = '-9999px';
			hs.container.appendChild(this.overlayBox);
		} else
		hs.discardElement(this.overlayBox);
	}
	if (this.fadeInOut) {
		from.op = up ? 0 : 1;
		to.op = up;
	}
	var t,
		exp = this,
		easing = Math[this.easing] || Math.easeInQuad,
		steps = (up ? hs.expandSteps : hs.restoreSteps) || parseInt(dur / 25) || 1;
	if (!up) easing = Math[this.easingClose] || easing;
	for (var i = 1; i <= steps ; i++) {
		t = Math.round(i * (dur / steps));
		
		(function(){
			var pI = i, size = {};
			
			for (var x in from) {
				size[x] = easing(t, from[x], to[x] - from[x], dur);
				if (isNaN(size[x])) size[x] = to[x];
				if (!/^op$/.test(x)) size[x] = Math.round(size[x]);
			}
			setTimeout ( function() {
				if (up && pI == 1) {
					exp.content.style.visibility = 'visible';
					exp.a.className += ' highslide-active-anchor';
				}
				exp.setSize(size);
			}, t);				
		})();
	}
	
	if (up) { 
			
		setTimeout(function() {
			if (exp.outline) exp.outline.table.style.visibility = "visible";
		}, t);
		setTimeout(function() {
			exp.afterExpand();
		}, t + 50);
	}
	else setTimeout(function() { exp.afterClose(); }, t);
},

setSize : function (to) {
	try {		
		if (to.op) hs.setStyles(this.wrapper, { opacity: to.op });
		hs.setStyles ( this.wrapper, {
			width : (to.xsize +to.xp1 + to.xp2 +
				2 * this.x.cb) +'px',
			height : (to.ysize +to.yp1 + to.yp2 +
				2 * this.y.cb) +'px',
			left: to.xpos +'px',
			top: to.ypos +'px'
		});
		hs.setStyles(this.content, {
			top: to.yp1 +'px',
			left: (to.xp1 + to.ximgPad) +'px',
			width: (to.ximgSize ||to.xsize) +'px',
			height: to.ysize +'px'
		});
		if (this.isHtml) {
			hs.setStyles(this.mediumContent, { 
				left: (this.x.pos - to.xpos 
					+ this.x.p1 - to.xp1) +'px',
				top: (this.y.pos - to.ypos 
					+ this.y.p1 - to.yp1) +'px' 
			});			
			this.innerContent.style.visibility = 'visible';
		}
		
		if (this.outline && this.outlineWhileAnimating) {
			var o = this.outline.offset - to.o;
			this.outline.setPosition(this, {
				x: to.xpos + o, 
				y: to.ypos + o, 
				w: to.xsize + to.xp1 + to.xp2 + - 2 * o, 
				h: to.ysize + to.yp1 + to.yp2 + - 2 * o
			}, 1);
		}
			
		this.wrapper.style.visibility = 'visible';
		
	} catch (e) {
		window.location.href = this.src;	
	}
},


afterExpand : function() {
	this.isExpanded = true;	
	this.focus();
	
	if (this.isHtml && this.objectLoadTime == 'after') this.writeExtendedContent();
	
	if (this.isHtml) {
		if (this.iframe) {
			try {
				var exp = this,
					doc = this.iframe.contentDocument || this.iframe.contentWindow.document;
				hs.addEventListener(doc, 'mousedown', function () {
					if (hs.focusKey != exp.key) exp.focus();
				});
			} catch(e) {}
			if (hs.ie && typeof this.isClosing != 'boolean') // first open 
				this.iframe.style.width = (this.objectWidth - 1) +'px'; // hasLayout
		}
	}
	this.prepareNextOutline();
	
	
	var p = hs.page, mX = hs.mouse.x + p.scrollLeft, mY = hs.mouse.y + p.scrollTop;
	this.mouseIsOver = this.x.pos < mX && mX < this.x.pos + this.x.get('wsize')
		&& this.y.pos < mY && mY < this.y.pos + this.y.get('wsize');
	
	if (this.overlayBox) this.showOverlays();
	
},


prepareNextOutline : function() {
	var key = this.key;
	var outlineType = this.outlineType;
	new hs.Outline(outlineType, 
		function () { try { hs.expanders[key].preloadNext(); } catch (e) {} });
},


preloadNext : function() {
	var next = this.getAdjacentAnchor(1);
	if (next && next.onclick.toString().match(/hs\.expand/)) 
		var img = hs.createElement('img', { src: hs.getSrc(next) });
},


getAdjacentAnchor : function(op) {
	var current = this.getAnchorIndex(), as = hs.anchors.groups[this.slideshowGroup || 'none'];
	
	/*< ? if ($cfg->slideshow) : ?>s*/
	if (!as[current + op] && this.slideshow && this.slideshow.repeat) {
		if (op == 1) return as[0];
		else if (op == -1) return as[as.length-1];
	}
	/*< ? endif ?>s*/
	return as[current + op] || null;
},

getAnchorIndex : function() {
	var arr = hs.anchors.groups[this.slideshowGroup || 'none'];
	for (var i = 0; i < arr.length; i++) {
		if (arr[i] == this.a) return i; 
	}
	return null;
},


cancelLoading : function() {	
	hs.expanders[this.key] = null;
	if (this.loading) hs.loading.style.left = '-9999px';
},

writeCredits : function () {
	this.credits = hs.createElement('a', {
		href: hs.creditsHref,
		className: 'highslide-credits',
		innerHTML: hs.lang.creditsText,
		title: hs.lang.creditsTitle
	});
	this.createOverlay({ 
		overlayId: this.credits, 
		position: 'top left' 
	});
},

getInline : function(types, addOverlay) {
	for (var i = 0; i < types.length; i++) {
		var type = types[i], s = null;
		if (!this[type +'Id'] && this.thumbsUserSetId)  
			this[type +'Id'] = type +'-for-'+ this.thumbsUserSetId;
		if (this[type +'Id']) this[type] = hs.getNode(this[type +'Id']);
		if (!this[type] && !this[type +'Text'] && this[type +'Eval']) try {
			s = eval(this[type +'Eval']);
		} catch (e) {}
		if (!this[type] && this[type +'Text']) {
			s = this[type +'Text'];
		}
		if (!this[type] && !s) {
			var next = this.a.nextSibling;
			while (next && !hs.isHsAnchor(next)) {
				if ((new RegExp('highslide-'+ type)).test(next.className || null)) {
					this[type] = next.cloneNode(1);
					break;
				}
				next = next.nextSibling;
			}
		}
		
		if (!this[type] && s) this[type] = hs.createElement('div', 
				{ className: 'highslide-'+ type, innerHTML: s } );
		
		if (addOverlay && this[type]) {
			var o = { position: (type == 'heading') ? 'above' : 'below' };
			for (var x in this[type+'Overlay']) o[x] = this[type+'Overlay'][x];
			o.overlayId = this[type];
			this.createOverlay(o);
		}
	}
},


// on end move and resize
doShowHide : function(visibility) {
	if (hs.hideSelects) this.showHideElements('SELECT', visibility);
	if (hs.hideIframes) this.showHideElements('IFRAME', visibility);
	if (hs.geckoMac) this.showHideElements('*', visibility);
},
showHideElements : function (tagName, visibility) {
	var els = document.getElementsByTagName(tagName);
	var prop = tagName == '*' ? 'overflow' : 'visibility';
	for (var i = 0; i < els.length; i++) {
		if (prop == 'visibility' || (document.defaultView.getComputedStyle(
				els[i], "").getPropertyValue('overflow') == 'auto'
				|| els[i].getAttribute('hidden-by') != null)) {
			var hiddenBy = els[i].getAttribute('hidden-by');
			if (visibility == 'visible' && hiddenBy) {
				hiddenBy = hiddenBy.replace('['+ this.key +']', '');
				els[i].setAttribute('hidden-by', hiddenBy);
				if (!hiddenBy) els[i].style[prop] = els[i].origProp;
			} else if (visibility == 'hidden') { // hide if behind
				var elPos = hs.getPosition(els[i]);
				elPos.w = els[i].offsetWidth;
				elPos.h = els[i].offsetHeight;
			
				
					var clearsX = (elPos.x + elPos.w < this.x.get('opos') 
						|| elPos.x > this.x.get('opos') + this.x.get('osize'));
					var clearsY = (elPos.y + elPos.h < this.y.get('opos') 
						|| elPos.y > this.y.get('opos') + this.y.get('osize'));
				var wrapperKey = hs.getWrapperKey(els[i]);
				if (!clearsX && !clearsY && wrapperKey != this.key) { // element falls behind image
					if (!hiddenBy) {
						els[i].setAttribute('hidden-by', '['+ this.key +']');
						els[i].origProp = els[i].style[prop];
						els[i].style[prop] = 'hidden';
					} else if (!hiddenBy.match('['+ this.key +']')) {
						els[i].setAttribute('hidden-by', hiddenBy + '['+ this.key +']');
					}
				} else if ((hiddenBy == '['+ this.key +']' || hs.focusKey == wrapperKey)
						&& wrapperKey != this.key) { // on move
					els[i].setAttribute('hidden-by', '');
					els[i].style[prop] = els[i].origProp || '';
				} else if (hiddenBy && hiddenBy.match('['+ this.key +']')) {
					els[i].setAttribute('hidden-by', hiddenBy.replace('['+ this.key +']', ''));
				}
						
			}
		}
	}
},

focus : function() {
	this.wrapper.style.zIndex = hs.zIndexCounter++;
	// blur others
	for (var i = 0; i < hs.expanders.length; i++) {
		if (hs.expanders[i] && i == hs.focusKey) {
			var blurExp = hs.expanders[i];
			blurExp.content.className += ' highslide-'+ blurExp.contentType +'-blur';
			if (blurExp.isImage) {
				blurExp.content.style.cursor = hs.ie ? 'hand' : 'pointer';
				blurExp.content.title = hs.lang.focusTitle;	
			}
		}
	}
	
	// focus this
	if (this.outline) this.outline.table.style.zIndex 
		= this.wrapper.style.zIndex;
	this.content.className = 'highslide-'+ this.contentType;
	if (this.isImage) {
		this.content.title = hs.lang.restoreTitle;
		
		if (hs.restoreCursor) {
			hs.styleRestoreCursor = window.opera ? 'pointer' : 'url('+ hs.graphicsDir + hs.restoreCursor +'), pointer';
			if (hs.ie && hs.ieVersion() < 6) hs.styleRestoreCursor = 'hand';
			this.content.style.cursor = hs.styleRestoreCursor;
		}
	}
	hs.focusKey = this.key;	
	hs.addEventListener(document, window.opera ? 'keypress' : 'keydown', hs.keyHandler);	
},

moveTo: function(x, y) {
	this.x.setPos(x);
	this.y.setPos(y);
},
resize : function (e) {
	var w, h, r = e.width / e.height;
	w = Math.max(e.width + e.dX, Math.min(this.minWidth, this.x.full));
	if (this.isImage && Math.abs(w - this.x.full) < 12) w = this.x.full;
	h = this.isHtml ? e.height + e.dY : w / r;
	if (h < Math.min(this.minHeight, this.y.full)) {
		h = Math.min(this.minHeight, this.y.full);
		if (this.isImage) w = h * r;
	}
	this.resizeTo(w, h);
},
resizeTo: function(w, h) {
	this.y.setSize(h);
	this.x.setSize(w);
},

close : function() {
	if (this.isClosing || !this.isExpanded
		) return;
	this.isClosing = true;
	
	hs.removeEventListener(document, window.opera ? 'keypress' : 'keydown', hs.keyHandler);
	
	try {
		if (this.isHtml) this.htmlPrepareClose();
		this.content.style.cursor = 'default';
		this.changeSize(
			0, {
				xpos: this.x.pos,
				ypos: this.y.pos,
				xsize: this.x.size,
				ysize: this.y.size,
				xp1: this.x.p1,
				yp1: this.y.p1,
				xp2: this.x.p2,
				yp2: this.y.p2,
				ximgSize: this.x.imgSize,
				ximgPad: this.x.get('imgPad'),
				o: this.outline ? this.outline.offset : 0
			}, {
				xpos: this.x.tpos - this.x.cb + this.x.tb,
				ypos: this.y.tpos - this.y.cb + this.y.tb,
				xsize: this.x.t,
				ysize: this.y.t,
				xp1: 0,
				yp1: 0,
				xp2: 0,
				yp2: 0,
				ximgSize: this.x.imgSize ? this.x.t : null,
				ximgPad: 0,
				o: hs.outlineStartOffset
			},
			hs.restoreDuration
		);
		
	} catch (e) { this.afterClose(); } 
},

htmlPrepareClose : function() {
	if (hs.geckoMac) { // bad redraws
		if (!hs.mask) hs.mask = hs.createElement('div', null, 
			{ position: 'absolute' }, hs.container);
		hs.setStyles(hs.mask, { width: this.x.size +'px', height: this.y.size +'px', 
			left: this.x.pos +'px', top: this.y.pos +'px', display: 'block' });			
	}
	if (this.objectType == 'swf') try { hs.$(this.body.id).StopPlay(); } catch (e) {}
	
	if (this.objectLoadTime == 'after' && !this.preserveContent) this.destroyObject();		
	if (this.scrollerDiv && this.scrollerDiv != this.scrollingContent) 
		this.scrollerDiv.style.overflow = 'hidden';
},

destroyObject : function () {
	if (hs.ie && this.iframe)
		try { this.iframe.contentWindow.document.body.innerHTML = ''; } catch (e) {}
	if (this.objectType == 'swf') swfobject.removeSWF(this.body.id);
	this.body.innerHTML = '';
},

sleep : function() {
	if (this.outline) this.outline.table.style.display = 'none';
	this.releaseMask = null;
	this.wrapper.style.display = 'none';
	hs.push(hs.sleeping, this);
},

awake : function() {
	hs.expanders[this.key] = this;
	
	if (!hs.allowMultipleInstances &&hs.focusKey != this.key) {	
		try { hs.expanders[hs.focusKey].close(); } catch (e){}
	}
	
	var z = hs.zIndexCounter++, stl = { display: '', zIndex: z };
	hs.setStyles (this.wrapper, stl);
	this.isClosing = false;
	
	var o = this.outline || 0;
	if (o) {
		if (!this.outlineWhileAnimating) stl.visibility = 'hidden';
		hs.setStyles (o.table, stl);		
	}
	this.show();
},

createOverlay : function (o) {
	var el = o.overlayId;
	if (typeof el == 'string') el = hs.getNode(el);
	if (!el || typeof el == 'string') return;
	el.style.display = 'block';
	this.genOverlayBox();
	var width = o.width && /^[0-9]+(px|%)$/.test(o.width) ? o.width : 'auto';
	if (/^(left|right)panel$/.test(o.position) && !/^[0-9]+px$/.test(o.width)) width = '200px';
	
	var overlay = hs.createElement(
		'div', { 
			id: 'hsId'+ hs.idCounter++, hsId: o.hsId
		}, {
			position: 'absolute',
			visibility: 'hidden',
			width: width,
			direction: hs.lang.cssDirection || ''
		},
		this.overlayBox,
		true
	);
	
	overlay.appendChild(el);
	hs.setAttribs(overlay, {
		hideOnMouseOut: o.hideOnMouseOut,
		opacity: o.opacity || 1,
		hsPos: o.position,
		fade: o.fade
	});
	
	if (this.gotOverlays) {
		this.positionOverlay(overlay);
		if (!overlay.hideOnMouseOut || this.mouseIsOver) hs.fade(overlay, 0, overlay.opacity);
	}
	hs.push(this.overlays, hs.idCounter - 1);
},
positionOverlay : function(overlay) {
	var p = overlay.hsPos || 'middle center';
	if (/left$/.test(p)) overlay.style.left = 0; 
	if (/center$/.test(p))	hs.setStyles (overlay, { 
		left: '50%',
		marginLeft: '-'+ Math.round(overlay.offsetWidth / 2) +'px'
	});	
	if (/right$/.test(p))	overlay.style.right = 0;
	
	if (/^leftpanel$/.test(p)) { 
		hs.setStyles(overlay, {
			right: '100%',
			marginRight: this.x.cb +'px',
			top: - this.y.cb +'px',
			bottom: - this.y.cb +'px',
			overflow: 'auto'
		});		 
		this.x.p1 = overlay.offsetWidth;
	
	} else if (/^rightpanel$/.test(p)) {
		hs.setStyles(overlay, {
			left: '100%',
			marginLeft: this.x.cb +'px',
			top: - this.y.cb +'px',
			bottom: - this.y.cb +'px',
			overflow: 'auto'
		});
		this.x.p2 = overlay.offsetWidth;
	}
	if (/^top/.test(p)) overlay.style.top = 0; 
	if (/^middle/.test(p))	hs.setStyles (overlay, { 
		top: '50%', 
		marginTop: '-'+ Math.round(overlay.offsetHeight / 2) +'px'
	});	
	if (/^bottom/.test(p)) overlay.style.bottom = 0;
	if (/^above$/.test(p)) {
		hs.setStyles(overlay, {
			left: (- this.x.p1 - this.x.cb) +'px',
			right: (- this.x.p2 - this.x.cb) +'px',
			bottom: '100%',
			marginBottom: this.y.cb +'px',
			width: 'auto'
		});
		this.y.p1 = overlay.offsetHeight;
	
	} else if (/^below$/.test(p)) {
		hs.setStyles(overlay, {
			position: 'relative',
			left: (- this.x.p1 - this.x.cb) +'px',
			right: (- this.x.p2 - this.x.cb) +'px',
			top: '100%',
			marginTop: this.y.cb +'px',
			width: 'auto'
		});
		this.y.p2 = overlay.offsetHeight;
		overlay.style.position = 'absolute';
	}
},

getOverlays : function() {	
	this.getInline(['heading', 'caption'], true);
	if (this.heading && this.dragByHeading) this.heading.className += ' highslide-move';
	if (hs.showCredits) this.writeCredits();
	for (var i = 0; i < hs.overlays.length; i++) {
		var o = hs.overlays[i], tId = o.thumbnailId, sg = o.slideshowGroup;
		if ((!tId && !sg) || (tId && tId == this.thumbsUserSetId)
				|| (sg && sg === this.slideshowGroup)) {
			if (this.isImage || (this.isHtml && o.useOnHtml))
			this.createOverlay(o);
		}
	}
	var os = [];
	for (var i = 0; i < this.overlays.length; i++) {
		var o = hs.$('hsId'+ this.overlays[i]);
		if (/panel$/.test(o.hsPos)) this.positionOverlay(o);
		else hs.push(os, o);
	}
	/*
	var curW = this.x.p1 + this.x.full + this.x.p2;
	if (hs.padToMinWidth && curW < hs.minWidth) {
		this.x.p1 += (hs.minWidth - curW) / 2;
		this.x.p2 += (hs.minWidth - curW) / 2;
	}
	*/
	for (var i = 0; i < os.length; i++) this.positionOverlay(os[i]);
	this.gotOverlays = true;
},
genOverlayBox : function() {
	if (!this.overlayBox) this.overlayBox = hs.createElement (
		'div', {
			className: this.wrapperClassName
		}, {
			position : 'absolute',
			width: this.x.size ? this.x.size +'px' : this.x.full +'px',
			height: 0,
			visibility : 'hidden',
			overflow : 'hidden',
			zIndex : hs.ie ? 4 : null
		},
		hs.container,
		true
	);
},
sizeOverlayBox : function(doWrapper, doPanels) {
	hs.setStyles( this.overlayBox, {
		width: this.x.size +'px', 
		height: this.y.size +'px'
	});
	if (doWrapper || doPanels) {
		for (var i = 0; i < this.overlays.length; i++) {
			var o = hs.$('hsId'+ this.overlays[i]);
			if (o && /^(above|below)$/.test(o.hsPos)) {
				if (hs.ie && (hs.ieVersion() <= 6 || document.compatMode == 'BackCompat')) {
					o.style.width = (this.overlayBox.offsetWidth + 2 * this.x.cb
						+ this.x.p1 + this.x.p2) +'px';
				}
				this.y[o.hsPos == 'above' ? 'p1' : 'p2'] = o.offsetHeight;
			}
		}
	}
	if (doWrapper) {
		hs.setStyles(this.content, {
			top: this.y.p1 +'px'
		});
		hs.setStyles(this.overlayBox, {
			top: (this.y.p1 + this.y.cb) +'px'
		});
	}
},

showOverlays : function() {
	var b = this.overlayBox;
	b.className = '';
	hs.setStyles(b, {
		top: (this.y.p1 + this.y.cb) +'px',
		left: (this.x.p1 + this.x.cb) +'px',
		overflow : 'visible'
	});
	if (hs.safari) b.style.visibility = 'visible';
	this.wrapper.appendChild (b);
	for (var i = 0; i < this.overlays.length; i++) {
		var o = hs.$('hsId'+ this.overlays[i]);
		o.style.zIndex = 4;
		if (!o.hideOnMouseOut || this.mouseIsOver) hs.fade(o, 0, o.opacity);
	}
},



createFullExpand : function () {
	this.fullExpandLabel = hs.createElement(
		'a', {
			href: 'javascript:hs.expanders['+ this.key +'].doFullExpand();',
			title: hs.lang.fullExpandTitle,
			className: 'highslide-full-expand'
		}
	);
	
	this.createOverlay({ 
		overlayId: this.fullExpandLabel, 
		position: hs.fullExpandPosition, 
		hideOnMouseOut: true, 
		opacity: hs.fullExpandOpacity
	});
},

doFullExpand : function () {
	try {
		if (this.fullExpandLabel) hs.discardElement(this.fullExpandLabel);
		
		this.focus();
		
		var xpos = this.x.pos - (this.x.full - this.x.size) / 2;
		if (xpos < hs.marginLeft) xpos = hs.marginLeft;
		
		this.moveTo(xpos, this.y.pos);
		this.resizeTo(this.x.full, this.y.full);
		this.doShowHide('hidden');
	
	} catch (e) {
		window.location.href = this.content.src;
	}
},


afterClose : function () {
	this.a.className = this.a.className.replace('highslide-active-anchor', '');
	
	this.doShowHide('visible');	
	
	if (this.isHtml && this.preserveContent) this.sleep();
	else {
		if (this.outline && this.outlineWhileAnimating) this.outline.destroy();
	
		hs.discardElement(this.wrapper);
	}
	if (hs.mask) hs.mask.style.display = 'none';
	hs.expanders[this.key] = null;		
	hs.reOrder();
}

};


// hs.Ajax object prototype
hs.Ajax = function (a, content, pre) {
	this.a = a;
	this.content = content;
	this.pre = pre;
};

hs.Ajax.prototype = {
run : function () {
	if (!this.src) this.src = hs.getSrc(this.a);
	if (this.src.match('#')) {
		var arr = this.src.split('#');
		this.src = arr[0];
		this.id = arr[1];
	}
	if (hs.cachedGets[this.src]) {
		this.cachedGet = hs.cachedGets[this.src];
		if (this.id) this.getElementContent();
		else this.loadHTML();
		return;
	}
	try { this.xmlHttp = new XMLHttpRequest(); }
	catch (e) {
		try { this.xmlHttp = new ActiveXObject("Msxml2.XMLHTTP"); }
		catch (e) {
			try { this.xmlHttp = new ActiveXObject("Microsoft.XMLHTTP"); }
			catch (e) { this.onError(); }
		}
	}
	var pThis = this; 
	this.xmlHttp.onreadystatechange = function() {
		if(pThis.xmlHttp.readyState == 4) {
			if (pThis.id) pThis.getElementContent();
			else pThis.loadHTML();
		}
	};
	this.xmlHttp.open("GET", this.src, true);
	this.xmlHttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
	this.xmlHttp.send(null);
},

getElementContent : function() {
	hs.init();
	var attribs = window.opera || hs.ie6SSL ? { src: 'about:blank' } : null;
	
	this.iframe = hs.createElement('iframe', attribs, 
		{ position: 'absolute', top: '-9999px' }, hs.container);
		
	this.loadHTML();
},

loadHTML : function() {
	var s = this.cachedGet || this.xmlHttp.responseText;
	if (this.pre) hs.cachedGets[this.src] = s;
	if (!hs.ie || hs.ieVersion() >= 5.5) {
		s = s.replace(/\s/g, ' ').replace(
			new RegExp('<link[^>]*>', 'gi'), '').replace(
			new RegExp('<script[^>]*>.*?</script>', 'gi'), '');

		if (this.iframe) {
			var doc = this.iframe.contentDocument;
			if (!doc && this.iframe.contentWindow) doc = this.iframe.contentWindow.document;
			if (!doc) { // Opera
				var pThis = this;
				setTimeout(function() {	pThis.loadHTML(); }, 25);
				return;
			}
			doc.open();
			doc.write(s);
			doc.close();
			try { s = doc.getElementById(this.id).innerHTML; } catch (e) {
				try { s = this.iframe.document.getElementById(this.id).innerHTML; } catch (e) {} // opera
			}
		} else {
			s = s.replace(new RegExp('^.*?<body[^>]*>(.*?)</body>.*?$', 'i'), '$1');
		}
	}
	hs.getElementByClass(this.content, 'DIV', 'highslide-body').innerHTML = s;
	this.onLoad();
	for (var x in this) this[x] = null;
}
};
if (document.readyState && hs.ie) {
	(function () {
		try {
			document.documentElement.doScroll('left');
		} catch (e) {
			setTimeout(arguments.callee, 50);
			return;
		}
		hs.domReady();
	})();
}
hs.langDefaults = hs.lang;
// history
var HsExpander = hs.Expander;

// set handlers
hs.addEventListener(window, 'load', function() {
	var sel = '.highslide img', 
		dec = 'cursor: url('+ hs.graphicsDir + hs.expandCursor +'), pointer !important;';
		
	var style = hs.createElement('style', { type: 'text/css' }, null, 
		document.getElementsByTagName('HEAD')[0]);

	if (!hs.ie) {
		style.appendChild(document.createTextNode(sel + " {" + dec + "}"));
	} else {
		var last = document.styleSheets[document.styleSheets.length - 1];
		if (typeof(last.addRule) == "object") last.addRule(sel, dec);
	}
});
hs.addEventListener(document, 'mousemove', function(e) {
	hs.mouse = { x: e.clientX, y: e.clientY	};
});
hs.addEventListener(document, 'mousedown', hs.mouseClickHandler);
hs.addEventListener(document, 'mouseup', hs.mouseClickHandler);
hs.addEventListener(window, 'load', hs.preloadImages);
hs.addEventListener(window, 'load', hs.preloadAjax);